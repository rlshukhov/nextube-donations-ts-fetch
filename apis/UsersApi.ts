/* tslint:disable */
/* eslint-disable */
/**
 * Nextube Donations
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UsersProfileGet200Response,
  UsersProfileUpdate200Response,
  UsersProfileUpdateRequest,
  UsersRegister200Response,
  UsersRegisterRequest,
} from '../models/index';
import {
    UsersProfileGet200ResponseFromJSON,
    UsersProfileGet200ResponseToJSON,
    UsersProfileUpdate200ResponseFromJSON,
    UsersProfileUpdate200ResponseToJSON,
    UsersProfileUpdateRequestFromJSON,
    UsersProfileUpdateRequestToJSON,
    UsersRegister200ResponseFromJSON,
    UsersRegister200ResponseToJSON,
    UsersRegisterRequestFromJSON,
    UsersRegisterRequestToJSON,
} from '../models/index';

export interface UsersLoginRequest {
    usersRegisterRequest: UsersRegisterRequest;
}

export interface UsersProfileUpdateOperationRequest {
    usersProfileUpdateRequest: UsersProfileUpdateRequest;
}

export interface UsersRegisterOperationRequest {
    usersRegisterRequest: UsersRegisterRequest;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     */
    async usersEmailConfirmationResendRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersProfileUpdate200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Session-Token"] = await this.configuration.apiKey("X-Session-Token"); // Token authentication
        }

        const response = await this.request({
            path: `/api/v1/users/emails/confirmation/resend`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersProfileUpdate200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async usersEmailConfirmationResend(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersProfileUpdate200Response> {
        const response = await this.usersEmailConfirmationResendRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async usersLoginRaw(requestParameters: UsersLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersRegister200Response>> {
        if (requestParameters['usersRegisterRequest'] == null) {
            throw new runtime.RequiredError(
                'usersRegisterRequest',
                'Required parameter "usersRegisterRequest" was null or undefined when calling usersLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UsersRegisterRequestToJSON(requestParameters['usersRegisterRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersRegister200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async usersLogin(requestParameters: UsersLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersRegister200Response> {
        const response = await this.usersLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersProfileGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersProfileGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Session-Token"] = await this.configuration.apiKey("X-Session-Token"); // Token authentication
        }

        const response = await this.request({
            path: `/api/v1/users/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersProfileGet200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async usersProfileGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersProfileGet200Response> {
        const response = await this.usersProfileGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async usersProfileUpdateRaw(requestParameters: UsersProfileUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersProfileUpdate200Response>> {
        if (requestParameters['usersProfileUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'usersProfileUpdateRequest',
                'Required parameter "usersProfileUpdateRequest" was null or undefined when calling usersProfileUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Session-Token"] = await this.configuration.apiKey("X-Session-Token"); // Token authentication
        }

        const response = await this.request({
            path: `/api/v1/users/profile`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UsersProfileUpdateRequestToJSON(requestParameters['usersProfileUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersProfileUpdate200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async usersProfileUpdate(requestParameters: UsersProfileUpdateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersProfileUpdate200Response> {
        const response = await this.usersProfileUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usersRegisterRaw(requestParameters: UsersRegisterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersRegister200Response>> {
        if (requestParameters['usersRegisterRequest'] == null) {
            throw new runtime.RequiredError(
                'usersRegisterRequest',
                'Required parameter "usersRegisterRequest" was null or undefined when calling usersRegister().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UsersRegisterRequestToJSON(requestParameters['usersRegisterRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersRegister200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async usersRegister(requestParameters: UsersRegisterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersRegister200Response> {
        const response = await this.usersRegisterRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
