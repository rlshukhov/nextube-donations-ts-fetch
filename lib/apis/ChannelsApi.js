"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Nextube Donations
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelsApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class ChannelsApi extends runtime.BaseAPI {
    /**
     */
    channelsCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['channelsCreateRequest'] == null) {
                throw new runtime.RequiredError('channelsCreateRequest', 'Required parameter "channelsCreateRequest" was null or undefined when calling channelsCreate().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-Session-Token"] = yield this.configuration.apiKey("X-Session-Token"); // Token authentication
            }
            const response = yield this.request({
                path: `/api/v1/channels`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ChannelsCreateRequestToJSON)(requestParameters['channelsCreateRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelsCreate200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    channelsCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.channelsCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    channelsFeaturedListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['limit'] == null) {
                throw new runtime.RequiredError('limit', 'Required parameter "limit" was null or undefined when calling channelsFeaturedList().');
            }
            if (requestParameters['offset'] == null) {
                throw new runtime.RequiredError('offset', 'Required parameter "offset" was null or undefined when calling channelsFeaturedList().');
            }
            const queryParameters = {};
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['offset'] != null) {
                queryParameters['offset'] = requestParameters['offset'];
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/channels/featured`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelsFeaturedList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    channelsFeaturedList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.channelsFeaturedListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    channelsOwnedGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling channelsOwnedGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-Session-Token"] = yield this.configuration.apiKey("X-Session-Token"); // Token authentication
            }
            const response = yield this.request({
                path: `/api/v1/channels/owned/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelsCreate200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    channelsOwnedGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.channelsOwnedGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    channelsOwnedListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['limit'] == null) {
                throw new runtime.RequiredError('limit', 'Required parameter "limit" was null or undefined when calling channelsOwnedList().');
            }
            if (requestParameters['offset'] == null) {
                throw new runtime.RequiredError('offset', 'Required parameter "offset" was null or undefined when calling channelsOwnedList().');
            }
            const queryParameters = {};
            if (requestParameters['limit'] != null) {
                queryParameters['limit'] = requestParameters['limit'];
            }
            if (requestParameters['offset'] != null) {
                queryParameters['offset'] = requestParameters['offset'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["X-Session-Token"] = yield this.configuration.apiKey("X-Session-Token"); // Token authentication
            }
            const response = yield this.request({
                path: `/api/v1/channels/owned`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelsOwnedList200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    channelsOwnedList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.channelsOwnedListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    channelsPublicIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['id'] == null) {
                throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling channelsPublicIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/channels/public/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelsPublicIdGet200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    channelsPublicIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.channelsPublicIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    channelsPublicNameGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['name'] == null) {
                throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling channelsPublicNameGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/api/v1/channels/public/name/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChannelsPublicIdGet200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    channelsPublicNameGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.channelsPublicNameGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.ChannelsApi = ChannelsApi;
